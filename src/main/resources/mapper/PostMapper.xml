<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.smxy.forum.mapper.PostMapper">

    <resultMap id="getPostManagerPageList" type="PostManagerPageListVo">
        <id property="postId" column="post_id"></id>
        <result property="title" column="title"></result>
        <result property="content" column="content"></result>
        <result property="createTime" column="create_time"></result>
        <result property="browseNumber" column="browse_number"></result>
        <result property="likeNumber" column="like_number"></result>
        <result property="collectionNumber" column="collection_number"></result>
        <result property="delFlag" column="del_flag"></result>
        <result property="recommend" column="recommend"></result>
        <result property="userId" column="user_id"></result>
        <result property="nickName" column="nick_name"></result>
        <result property="avatar" column="avatar"></result>
        <result property="remark" column="remark"></result>
        <result property="auditStatus" column="audit_status"></result>
        <result property="node" column="node"></result>
    </resultMap>
    <select id="getPostManagerPageListVo" resultMap="getPostManagerPageList">
        SELECT
        t1.post_id,
        t1.title,
        t1.content,
        t1.create_time,
        t1.update_time,
        t1.browse_number,
        t1.like_number,
        t1.collection_number,
        t1.del_flag,
        t1.recommend,
        t2.user_id,
        t2.nick_name,
        t2.avatar,
        t4.remark,
        t4.audit_status,
        t1.node
        FROM
        post t1
        JOIN
        user t2 ON t1.user_id = t2.user_id
        LEFT JOIN
        tags_post tp ON t1.post_id = tp.post_id
        Left Join
        post_audit t4 ON t1.post_id = t4.post_id
        <where>
            <if test="postId != null and postId != ''">
                AND t1.post_id = #{postId}
            </if>
            <if test="userId != null and userId != ''">
                AND t1.user_id = #{userId}
            </if>
            <if test="delFlag != null and delFlag != ''">
                AND t1.del_flag = #{delFlag}
            </if>
            <if test="recommend != null and recommend != ''">
                AND t1.recommend = #{recommend}
            </if>
            <if test="auditStatus !=null and auditStatus != ''">
                and t4.audit_status = #{auditStatus}
            </if>
            <if test="title != null and title != ''">
                AND t1.title LIKE CONCAT('%', #{title}, '%')
            </if>
        </where>
        GROUP BY
            t1.post_id,
            t1.title,
            t1.content,
            t1.create_time,
            t1.update_time,
            t1.browse_number,
            t1.like_number,
            t1.collection_number,
            t1.del_flag,
            t1.recommend,
            t1.node,
            t2.user_id,
            t2.nick_name,
            t2.avatar,
            t4.remark,
            t4.audit_status
        ORDER BY
        t1.update_time DESC,t1.create_time DESC
    </select>

    <select id="getOwnUserPostListVo" resultType="postListVo">
        SELECT
            t1.post_id,
            t1.user_id,
            t4.avatar,
            t4.nick_name,
            t1.title,
            t1.node,
            t1.content,
            t1.create_time,
            t1.update_time,
            t1.like_number,
            t1.comment_number,
            CASE
                WHEN t2.likes_id IS NOT NULL THEN 1
                ELSE 0
                END AS like_status,
            t3.audit_status
        FROM
            post t1
        LEFT JOIN
            likes t2
        ON t1.post_id = t2.target_id
        AND t2.user_id = #{userId}
        AND t2.type = '0'
        AND t2.del_flag = '0'
        LEFT JOIN
            post_audit t3
        ON
            t1.post_audit_id = t3.post_audit_id
        LEFT JOIN
            user t4
        ON
            t4.user_id = t1.user_id
        WHERE
            t1.del_flag = '0'
        AND t1.user_id = #{userId}
    </select>

    <select id="getOtherUserPostListVo" resultType="postListVo">
        SELECT
            t1.post_id,
            t1.user_id,
            t4.avatar,
            t4.nick_name,
            t1.title,
            t1.node,
            t1.content,
            t1.create_time,
            t1.update_time,
            t1.like_number,
            t1.comment_number,
            CASE
                WHEN t2.likes_id IS NOT NULL THEN 1
                ELSE 0
                END AS like_status,
            t3.audit_status
        FROM
            post t1
        LEFT JOIN
            likes t2
            ON t1.post_id = t2.target_id
            AND t2.user_id = #{userId}
            AND t2.type = '0'
            AND t2.del_flag = '0'
        LEFT JOIN
            post_audit t3
        ON
            t1.post_audit_id = t3.post_audit_id
        LEFT JOIN
            user t4
        ON
            t4.user_id = t1.user_id
        WHERE
            t1.del_flag = '0'
            AND t1.user_id = #{otherUserId}
            AND t3.audit_status = 1
    </select>

    <select id="getUserCollection" resultType="postListVo">
        SELECT
            t1.post_id,
            t1.user_id,
            t5.avatar,
            t5.nick_name,
            t1.title,
            t1.node,
            t1.content,
            t1.create_time,
            t1.update_time,
            t1.like_number,
            t1.comment_number,
            CASE
                WHEN t2.likes_id IS NOT NULL THEN 1
                ELSE 0
                END AS like_status
        FROM
            post t1
        LEFT JOIN
            likes t2
        ON t1.post_id = t2.target_id
                AND t2.user_id = #{userId}
                AND t2.type = '0'
                AND t2.del_flag = '0'
        LEFT JOIN
            post_audit t3
        ON
                t1.post_audit_id = t3.post_audit_id
        LEFT JOIN
                collection t4
        ON
            t1.post_id = t4.post_id
        LEFT JOIN
            user t5
        ON
            t5.user_id = t1.user_id
        WHERE
            t1.del_flag = '0'
          AND t4.user_id = #{userId}
          AND t4.del_flag = '0'
          AND t3.audit_status = 1
    </select>

    <select id="getHomePostList" resultType="postListVo">
        SELECT
            t1.post_id,
            t1.user_id,
            t5.avatar,
            t5.nick_name,
            t1.title,
            t1.node,
            t1.content,
            t1.create_time,
            t1.update_time,
            t1.like_number,
            t1.comment_number,
            CASE
                WHEN t2.likes_id IS NOT NULL THEN 1
                ELSE 0
                END AS like_status
        FROM
            post t1
        LEFT JOIN
            likes t2
        ON t1.post_id = t2.target_id
            AND t2.user_id = #{userId}
            AND t2.type = '0'
            AND t2.del_flag = '0'
        LEFT JOIN
            post_audit t3
        ON
            t1.post_audit_id = t3.post_audit_id
        LEFT JOIN
            user t5
        ON
            t5.user_id = t1.user_id
        <where>
            t1.del_flag = '0'
            AND t3.audit_status = 1
            AND t1.recommend = #{postPageListDTO.recommend}
            <if test="postPageListDTO.searchContent != null and postPageListDTO.searchContent != ''">
                AND (
                <![CDATA[
                REGEXP_SUBSTR(t1.content, '<p>(.*?)</p>') LIKE CONCAT('%', #{postPageListDTO.searchContent}, '%')
            ]]>
                OR t1.title LIKE CONCAT('%', #{postPageListDTO.searchContent}, '%')
                )
            </if>
            <choose>
                <when test="postPageListDTO.timeFrame == 1">
                    AND t1.create_time >= DATE_SUB(NOW(), INTERVAL 1 DAY)
                </when>
                <when test="postPageListDTO.timeFrame != null and postPageListDTO.timeFrame > 1">
                    AND t1.create_time >= DATE_SUB(NOW(), INTERVAL #{postPageListDTO.timeFrame} DAY)
                </when>
            </choose>
            <if test="postPageListDTO.concernStatus == 1">
                AND EXISTS (
                SELECT 1
                FROM concern t4
                WHERE t4.concern_user_id = t1.user_id
                AND t4.user_id         = #{userId}
                AND t4.del_flag        = '0'
                )
            </if>
        </where>

        <choose>
            <!-- 按创建时间倒序（最新优先） -->
            <when test="orderType == 1">
                ORDER BY t1.create_time DESC,t1.like_number DESC
            </when>

            <!-- 按点赞数倒序（热门优先） -->
            <when test="orderType == 2">
                ORDER BY t1.like_number DESC,t1.create_time DESC
            </when>

            <!-- 默认：创建时间倒序 -->
            <otherwise>
                ORDER BY t1.create_time DESC,t1.like_number DESC
            </otherwise>
        </choose>

    </select>

    <select id="getPostDetailToView" resultType="postDetailVo">
        SELECT
            t1.post_id,
            t1.title,
            t1.node,
            t1.content,
            t1.create_time,
            t1.update_time,
            t1.like_number,
            t1.comment_number,
            t1.collection_number,
            t1.browse_number,
            t1.user_id,
            t2.nick_name,
            t3.audit_status,

            CASE
                WHEN t4.likes_id IS NOT NULL THEN '1'
                ELSE '0'
                END                  AS like_status,

            CASE
                WHEN t5.collection_id IS NOT NULL THEN '1'
                ELSE '0'
                END                  AS collection_status

        FROM post t1
                 INNER JOIN post_audit t3 ON t1.post_audit_id = t3.post_audit_id
                 INNER JOIN user   t2 ON t1.user_id       = t2.user_id
                 LEFT  JOIN likes      t4 ON t4.target_id     = t1.post_id
            AND t4.type          = '0'
            AND t4.user_id       = #{userId}
            AND t4.del_flag      = '0'
                 LEFT  JOIN collection t5 ON t5.post_id       = t1.post_id
            AND t5.user_id       = #{userId}
            AND t5.del_flag      = '0'

        WHERE t1.post_id   = #{postId}
          AND t1.del_flag  = '0'
    </select>

    <update id="updatePostLikesNumber">
        UPDATE post
        SET like_number = like_number +
        CASE post_id
        <foreach collection="list" item="item">
            WHEN #{item.postId} THEN #{item.likesNumber}
        </foreach>
        ELSE 0  <!-- 添加 ELSE 0 -->
        END
        WHERE post_id IN
        <foreach collection="list" item="item" open="(" separator="," close=")">
            #{item.postId}
        </foreach>
    </update>

    <update id="updatePostCollectionNumber">
        UPDATE post
        SET collection_number = collection_number +
        CASE post_id
        <foreach collection="list" item="item">
            WHEN #{item.postId} THEN #{item.collectionNumber}
        </foreach>
        ELSE 0  <!-- 添加 ELSE 0 -->
        END
        WHERE post_id IN
        <foreach collection="list" item="item" open="(" separator="," close=")">
            #{item.postId}
        </foreach>
    </update>

    <update id="updatePostCommentNumber">
        UPDATE post
        SET comment_number = comment_number +
        CASE post_id
        <foreach collection="list" item="item">
            WHEN #{item.postId} THEN #{item.commentNumber}
        </foreach>
        ELSE 0  <!-- 添加 ELSE 0 -->
        END
        WHERE post_id IN
        <foreach collection="list" item="item" open="(" separator="," close=")">
            #{item.postId}
        </foreach>
    </update>

    <update id="updatePostBrowseNumber">
        UPDATE post
        SET browse_number = browse_number +
        CASE post_id
        <foreach collection="list" item="item">
            WHEN #{item.postId} THEN #{item.browseNumber}
        </foreach>
        ELSE 0  <!-- 添加 ELSE 0 -->
        END
        WHERE post_id IN
        <foreach collection="list" item="item" open="(" separator="," close=")">
            #{item.postId}
        </foreach>
    </update>
</mapper>
